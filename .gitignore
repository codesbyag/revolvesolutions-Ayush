import csv
import pytest

#Que1. How many total number of days does the flights table cover?
def number_of_days(flight_files):
    """
    returning to the total number of day
    """
    unique_days = set()
    with open(flights_file) as flights:
        csv_reader = csv.DictReader(flights)
        for line in csv_reader:
            date = (line["year"], line["month"], line["day"])
            unique_days.add(date)
    return len(unique_days)
    
    #Output - 365
    
    
    #que2. How many dparture citites(not airports) does the flights database covers?
    def departure_cities(flights_file, airports_file):
  
    #eturns the cities that the flights database cover.
    
    departure_airports = []
    cities = set()
    with open(flights_file) as flights:
        flights_reader = csv.DictReader(flights)
        for line in flights_reader:
            if line["origin"] not in departure_airports:
                departure_airports.append(line["origin"])

    with open(airports_file) as airports:
        airports_reader = csv.DictReader(airports)
        for line in airports_reader:
            for airport in departure_airports:
                if line["IATA_CODE"] == airport:
                    cities.add(line["CITY"])
    return cities
    
    #Output - ['New York' , 'Newark']
    
    
    
   # Que3:- what is the relationship between flights and planes tables?


def relationship(flights_tables, planes_tables):
       
     #returns the relationship between two databases
       
       with open(flights_tables) as flights:
            flights_reader = csv.reader(flights)
            flights_coloums = next(flights_reader)
            with open(planes_tables)  as planes:   
                planes_reader = csv.reader(planes)
                planes_coloums = next(planes_reader)
                relationship = [
                relation for relation in flights_coloums if relation in planes_coloums
            ]
       if not relationship:
       return None
       return relationship  
       
    #Output - ['year', 'tailnum']
 
 # Q4:- which airplane manufacturer incurred the most delays in the analysis period?
 
 def most_delay_manufacturer(self, flights: str, planes: str) -> str:
        '''
        Returns manufacturer of the plane whose flights are most delayed
        '''
        delay_count = dict()
        res = ""
        with open(flights) as f:
            flight_read = csv.DictReader(f)
            for row in flight_read:
                tailnum = row["tailnum"]

                arr_delay = "".join(ch for ch in row["arr_delay"] if ch.isdigit())
                dep_delay = "".join(ch for ch in row["dep_delay"] if ch.isdigit())

                if arr_delay != "" and dep_delay != "" and int(arr_delay) > 0 and int(dep_delay) > 0:
                    delay_count[tailnum] = delay_count.get(tailnum, 0) + int(arr_delay) + int(dep_delay)
                elif arr_delay != "" and int(arr_delay) > 0:
                    delay_count[tailnum] = delay_count.get(tailnum, 0) + int(arr_delay)
                elif dep_delay != "" and int(dep_delay) > 0:
                    delay_count[tailnum] = delay_count.get(tailnum, 0) + int(dep_delay)

        sorted_delay_count = sorted(delay_count.items(), key=lambda val: val[1])

        k, N = 1, len(sorted_delay_count)
        while k < N:
            with open(planes) as pl:
                plane_read = csv.DictReader(pl)
                for row in plane_read:
                    if row["tailnum"] == sorted_delay_count[-k][0]:
                        res = row["manufacturer"]
                        k = N
            k += 1

        return res
        
        #Output - EMBRAER
 
  #Que5 Which are the two most connected citites?
  
  def most_delays_manf(flights):
    manf = dict(list(zip(planes.tailnum, planes.manufacturer)))
    flights['manf']=flights.tailnum.map(manf)
    f3=flights.set_index('manf')[['dep_delay','arr_delay']]
    res=list(((pd.DataFrame((f3.where(f3 > 0, 0)['dep_delay'] + f3.where(f3 > 0, 0)['arr_delay']),
                        columns=['total_delay'])).reset_index()).groupby('manf').total_delay.agg(['sum']).sort_values(
        by='sum', ascending=False).reset_index().loc[0])
    return res
    
    Output - ['New York', 'Los Angeles']
    
    
